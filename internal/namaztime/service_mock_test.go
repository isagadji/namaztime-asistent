// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package namaztime_test is a generated GoMock package.
package namaztime_test

import (
	namaztime "marusya/internal/namaztime"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAladhanService is a mock of AladhanService interface.
type MockAladhanService struct {
	ctrl     *gomock.Controller
	recorder *MockAladhanServiceMockRecorder
}

// MockAladhanServiceMockRecorder is the mock recorder for MockAladhanService.
type MockAladhanServiceMockRecorder struct {
	mock *MockAladhanService
}

// NewMockAladhanService creates a new mock instance.
func NewMockAladhanService(ctrl *gomock.Controller) *MockAladhanService {
	mock := &MockAladhanService{ctrl: ctrl}
	mock.recorder = &MockAladhanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAladhanService) EXPECT() *MockAladhanServiceMockRecorder {
	return m.recorder
}

// GetTimeByCity mocks base method.
func (m *MockAladhanService) GetTimeByCity(city, timezone string) *namaztime.AzanTime {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeByCity", city, timezone)
	ret0, _ := ret[0].(*namaztime.AzanTime)
	return ret0
}

// GetTimeByCity indicates an expected call of GetTimeByCity.
func (mr *MockAladhanServiceMockRecorder) GetTimeByCity(city, timezone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeByCity", reflect.TypeOf((*MockAladhanService)(nil).GetTimeByCity), city, timezone)
}

// MockDbStorage is a mock of DbStorage interface.
type MockDbStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDbStorageMockRecorder
}

// MockDbStorageMockRecorder is the mock recorder for MockDbStorage.
type MockDbStorageMockRecorder struct {
	mock *MockDbStorage
}

// NewMockDbStorage creates a new mock instance.
func NewMockDbStorage(ctrl *gomock.Controller) *MockDbStorage {
	mock := &MockDbStorage{ctrl: ctrl}
	mock.recorder = &MockDbStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbStorage) EXPECT() *MockDbStorageMockRecorder {
	return m.recorder
}

// GetTodayAzanTimeByCity mocks base method.
func (m *MockDbStorage) GetTodayAzanTimeByCity(city string) (*namaztime.AzanTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodayAzanTimeByCity", city)
	ret0, _ := ret[0].(*namaztime.AzanTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodayAzanTimeByCity indicates an expected call of GetTodayAzanTimeByCity.
func (mr *MockDbStorageMockRecorder) GetTodayAzanTimeByCity(city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodayAzanTimeByCity", reflect.TypeOf((*MockDbStorage)(nil).GetTodayAzanTimeByCity), city)
}

// SaveAzanTime mocks base method.
func (m *MockDbStorage) SaveAzanTime(azanTime *namaztime.AzanTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAzanTime", azanTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAzanTime indicates an expected call of SaveAzanTime.
func (mr *MockDbStorageMockRecorder) SaveAzanTime(azanTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAzanTime", reflect.TypeOf((*MockDbStorage)(nil).SaveAzanTime), azanTime)
}
